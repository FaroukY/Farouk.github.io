- layout: top-middle
  name: "KFC: A Scalable Approximation Algorithm for k-center Fair Clustering"
  #link: github.com/sproogen
  quote: >
    <mark>Accepted to Neural Information Processing Systems (NeurIPS) 2020 </mark>
  #description: | # this will include new lines to allow paragraphs
  #  In this paper, we study the problem of fair clustering on the k−center objective. In fair clustering, the input is N points, each belonging to at least one of l protected groups, e.g. male, female, Asian, Hispanic. The objective is to cluster the N points into k clusters to minimize a classical clustering objective function. However, there is an additional constraint that each cluster needs to be fair, under some notion of fairness. This ensures that no group is either “over-represented” or “under-represented” in any cluster. Our work builds on the work of Chierichetti et al. (NIPS 2017), Bera et al. (NeurIPS 2019), Ahmadian et al. (KDD 2019), and Bercea et al. (APPROX 2019). We obtain a randomized 3−approximation algorithm for the k−center objective function, beating the previous state of the art (4−approximation). We test our algorithm on real datasets, and show that our algorithm is effective in finding good clusters without over-representation or underrepresentation, surpassing the current state of the art in runtime speed, clustering cost, while achieving similar fairness violations.

- layout: top-middle
  name: "Speeding up the AIFV-2 dynamic programs by two orders of magnitude using Range Minimum Queries"
  link: https://arxiv.org/abs/2002.09885
  quote: >
    Submitted to Theoretical Computer Science Journal. 
  #description: | # this will include new lines to allow paragraphs
  #  AIFV-2 codes are a new method for constructing lossless codes for memoryless sources that provide better worst-case redundancy than Huffman codes. They do this by using two code trees instead of one and also allowing some bounded delay in the decoding process. Known algorithms for constructing AIFV-code are iterative; at each step they replace the current code tree pair with a "better" one. The current state of the art for performing this replacement is a pair of Dynamic Programming (DP) algorithms that use O(n^5) time to fill in two tables, each of size O(n^3) (where n is the number of different characters in the source). This paper describes how to reduce the time for filling in the DP tables by two orders of magnitude, down to O(n^3). It does this by introducing a grouping technique that permits separating the Θ(n^3)-space tables into Θ(n) groups, each of size O(n^2), and then using Two-Dimensional Range-Minimum Queries (RMQs) to fill in that group's table entries in O(n^2) time. This RMQ speedup technique seems to be new and might be of independent interest. 

- layout: top-middle
  name: "Polynomial Time Algorithms for Constructing Optimal Binary AIFV-2 Codes"
  link: https://arxiv.org/abs/2001.11170
  quote: >
    Submitted to IEEE Transactions on Information Theory Journal.
  #description: | # this will include new lines to allow paragraphs
  #  Huffman Codes are optimal Instantaneous Fixed-to-Variable (FV) codes in which every source symbol can only be encoded by one codeword. Relaxing these constraints permits constructing better FV codes. More specifically, recent work has shown that AIFV-m codes can beat Huffman coding. AIFV-m codes construct am m-tuple of different coding trees between which the code alternates and are only almost instantaneous (AI). This means that decoding a word might require a delay of a finite number of bits. Current algorithms for constructing optimal AIFV-m codes are iterative processes that construct progressively "better sets" of code trees. The processes have been proven to finitely converge to the optimal code but with no known bounds on the convergence rate. This paper derives a geometric interpretation of the space of binary AIFV-2 codes, permitting the development of the first polynomially time-bounded iterative procedures for constructing optimal AIFV codes. We first show that a simple binary search procedure can replace the current iterative process to construct optimal binary AIFV-2 codes. We then describe how to frame the problem as a linear programming with an exponential number of constraints but a polynomial-time separability oracle. This permits using the Grötschel, Lovász and Schrijver ellipsoid method to solve the problem in a polynomial number of steps. While more complicated, this second method has the potential to lead to a polynomial time algorithm to construct optimal AIFV-m codes for general m.

- layout: top-middle
  name: "Polynomial Time Algorithms for Constructing Optimal AIFV Codes"
  link: https://ieeexplore.ieee.org/document/8712620
  quote: >
    Accepted to Data Compression Conference (DCC) 2019. 
  #description: | # this will include new lines to allow paragraphs
  #  Huffman Codes are "optimal" Fixed-to-Variable (FV) codes if every source symbol can only be encoded by one codeword. Relaxing this constraint permits constructing better FV codes. More specifically, recent work has shown that AIFV codes can beat Huffman coding. AIFV codes construct a set of different coding trees between which the code alternates and are only "almost instantaneous" (AI). This means that decoding a word might require a delay of a finite number of bits. Current algorithms for constructing optimal AIFV codes are iterative processes that construct progressively "better sets" of code trees. The processes have been proven to finitely converge to the optimal code but with no known bounds on the convergence time. This paper derives a geometric interpretation of the space of AIFV codes. This permits the development of new polynomially time-bounded iterative procedures for constructing optimal AIFV codes. For the simplest case we show that a binary search procedure can replace the current iterative process. For the more complicated cases we describe how to frame the problem as a linear programming problem with an exponential number of constraints but a polynomial time separability oracle. This permits using the Grotschel, Lovasz and Schrijver ellipsoid method to solve the problem in a polynomial number of steps.

- layout: top-middle
  name: "Greedy Approximation Framework for Top-k Diverse Topological Sorts."
  quote: >
    Preprint.
